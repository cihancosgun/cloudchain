"use strict";
var Node = (function () {
    function Node(opts, parent) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        if (parent === void 0) { parent = null; }
        //this.path = opts.path || ''
        this.name = opts.name || opts.path;
        //this.mode = opts.mode || ''
        this.type = opts.type || '';
        //this.sha = opts.sha || ''
        //this.size = opts.size
        this.children = opts.children || [];
        var _children = [];
        this.children.forEach(function (node) { return _children.push(new Node(node, _this)); });
        this.children = _children;
        this._params = opts;
        this._parent = parent;
        this._focus = opts._focus || false;
        // TODO need to consider the type variable
        this._is_folder = this.type === 'dir' || this.children.length > 0;
        this._is_expanded = this.type === 'dir' || this.children.length > 0;
    }
    Node.prototype.isDir = function () {
        return this.type === 'dir' || this.children.length > 0;
    };
    Object.defineProperty(Node.prototype, "params", {
        get: function () { return this.params; },
        set: function (p) { this.params = p; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "parent", {
        get: function () { return this._parent; },
        set: function (n) { this._parent = n; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "isFolder", {
        get: function () { return this._is_folder; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "isExpanded", {
        get: function () { return this._is_expanded; },
        set: function (t) { this._is_expanded = t; },
        enumerable: true,
        configurable: true
    });
    Node.prototype.hasParent = function () { return this.parent !== null || typeof (this.parent) === 'undefined'; };
    Node.prototype.focus = function () { this._focus = true; };
    Node.prototype.blur = function () { this._focus = false; };
    Node.prototype.stringify = function () {
        return JSON.stringify(this, function (key, value) {
            if (key.includes('_'))
                return;
            return value;
        });
    };
    return Node;
}());
exports.Node = Node;
