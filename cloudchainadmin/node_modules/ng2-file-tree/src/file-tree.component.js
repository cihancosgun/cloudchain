"use strict";
var core_1 = require('@angular/core');
var core_2 = require('@angular/core');
var core_3 = require('@angular/core');
var core_4 = require('@angular/core');
var core_5 = require('@angular/core');
var tree_node_1 = require('./tree-node');
var tree_node_2 = require('./tree-node');
var DIRECTORY_TREE_TEMPLATE = "\n<ul class=\"file-tree\">\n  <node [node]=\"root\" (clicked)=\"fileTreeClicked($event)\"></node>\n</ul>\n";
var DIRECTORY_TREE_STYLE = "\n.file-tree { padding: 0; }\n";
var FileTreeComponent = (function () {
    function FileTreeComponent(_eref) {
        this._eref = _eref;
        this.onChange = new core_2.EventEmitter();
        this.keyboardWatch = false;
    }
    FileTreeComponent.prototype.ngOnInit = function () {
        this.root = new tree_node_1.TreeNode({ name: '/', type: tree_node_2.FileType.dir });
        this.currFocusNode = null;
    };
    FileTreeComponent.prototype.ngOnChanges = function (changes) {
        if (typeof (changes['tree'].currentValue) !== 'undefined') {
            this.root = this.tree;
        }
    };
    FileTreeComponent.prototype.fileTreeClicked = function (nextNode) {
        this.updateFocusNode(nextNode);
        this.onChange.emit(nextNode);
    };
    FileTreeComponent.prototype.keydownHandler = function (event) {
        if (!this.keyboardWatch)
            return;
        if (this.currFocusNode === null)
            return;
        switch (event.keyCode) {
            case 13:
                this.onChange.emit(this.currFocusNode);
                break;
            case 37:
                if (this.currFocusNode.isDir()
                    && this.currFocusNode.isExpanded) {
                    this.currFocusNode.fold();
                    return;
                }
                if (!this.currFocusNode.hasParent())
                    return;
                this.updateFocusNode(this.currFocusNode.getParentNode());
                break;
            case 38:
                // Move to upper item
                break;
            case 39:
                if (!this.currFocusNode.isDir())
                    return;
                if (!this.currFocusNode.isExpanded) {
                    this.currFocusNode.expand();
                }
                else if (this.currFocusNode.children.length > 0) {
                    this.updateFocusNode(this.currFocusNode.children[0]);
                }
                break;
            case 40:
                if (this.currFocusNode.isDir()
                    && this.currFocusNode.isExpanded
                    && this.currFocusNode.children.length > 0) {
                    // first child
                    this.updateFocusNode(this.currFocusNode.children[0]);
                }
                else {
                }
                break;
        }
    };
    FileTreeComponent.prototype.updateFocusNode = function (next) {
        if (this.currFocusNode) {
            this.currFocusNode.blur();
        }
        this.currFocusNode = next;
        this.currFocusNode.focus();
    };
    FileTreeComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'file-tree',
                    template: DIRECTORY_TREE_TEMPLATE,
                    styles: [DIRECTORY_TREE_STYLE],
                    host: {
                        '(window:keydown)': 'keydownHandler($event)'
                    }
                },] },
    ];
    /** @nocollapse */
    FileTreeComponent.ctorParameters = [
        { type: core_3.ElementRef, },
    ];
    FileTreeComponent.propDecorators = {
        'tree': [{ type: core_4.Input },],
        'keyboardWatch': [{ type: core_4.Input },],
        'onChange': [{ type: core_5.Output },],
    };
    return FileTreeComponent;
}());
exports.FileTreeComponent = FileTreeComponent;
