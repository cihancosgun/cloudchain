"use strict";
(function (FileType) {
    FileType[FileType["file"] = 0] = "file";
    FileType[FileType["dir"] = 1] = "dir";
})(exports.FileType || (exports.FileType = {}));
var FileType = exports.FileType;
var TreeNode = (function () {
    function TreeNode(params, parent) {
        var _this = this;
        if (parent === void 0) { parent = null; }
        this.name = params.name;
        this.type = params.type || FileType.file;
        this.children = [];
        // update private values
        this.parentNode = parent;
        this._isFocused = params.focus || false;
        this._isExpanded = this.type === FileType.dir || this.children.length > 0;
        if (parent !== null) {
            var parentPath = this.parentNode.getFullPath();
            if (parentPath.slice(-1) === '/') {
                this.fullFilepath = "" + parentPath + this.name;
            }
            else {
                this.fullFilepath = parentPath + "/" + this.name;
            }
        }
        else {
            this.fullFilepath = this.name;
        }
        if (typeof (params.children) !== 'undefined' && params.children !== null) {
            params.children.forEach(function (fileNodeParams) { return _this.children.push(new TreeNode(fileNodeParams, _this)); });
        }
    }
    TreeNode.prototype.getFullPath = function () {
        return this.fullFilepath;
    };
    TreeNode.prototype.isDir = function () {
        return this.type === FileType.dir ||
            this.children.length > 0;
    };
    TreeNode.prototype.getParentNode = function () {
        return this.parentNode;
    };
    TreeNode.prototype.isExpanded = function () {
        return this._isExpanded;
    };
    TreeNode.prototype.expand = function () {
        this._isExpanded = true;
    };
    TreeNode.prototype.fold = function () {
        this._isExpanded = false;
    };
    TreeNode.prototype.hasParent = function () {
        return this.getParentNode !== null;
    };
    TreeNode.prototype.focus = function () {
        this._isFocused = true;
    };
    TreeNode.prototype.blur = function () {
        this._isFocused = false;
    };
    TreeNode.prototype.stringify = function () {
        return JSON.stringify(this, function (key, value) {
            if (key.includes('_'))
                return;
            return value;
        });
    };
    return TreeNode;
}());
exports.TreeNode = TreeNode;
